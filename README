Project Write-Up

1. Overview of Algorithm
- blah


2. Applying our algorithm to an interesting board
- come up with examples, show how naive approach (just bfs)
  may differ/fail compared to ours (bfs + backtracking)

- boards that our new alg fail on
- boards that pass our new alg but not naive approach


3. Evaluation of our algorithm with respect to finding and minimizing wire layouts
Our algorithm uses BFS. BFS is exhaustive, so if we are unable to find a path between a pair of endpoints, it means it is either impossible, or there are some wires in the way that must be rerouted.
In the case that already some connected wire(s) must be rerouted, we backtrack and remove the most recently placed wire(s) till we are able to place a wire between the current pair of endpoints.
The repetition of this process ensures that we can place all the wires if it is possible. 
Additionally, BFS finds the shortest paths to the spots on the board, so while our backtracking approach may lead to some wires becoming elongated, ultimately we still minimize the wires lengths as best as we can.

For multiple boards without obstacles and wires that cross, our BFS with back-tracking produces the same wire lengths as the normal BFS.
However, if there are any violations, our algorithm with BFS and back-tracking produces wire lengths that fit the situation, both shortening and elongating certain wires to make it work.
On the other hand, our naive approach with just BFS fails.

For boards that cannot work under any circumstances, such as a 2x2 board filled with two pairs with endpoints where the start and end are diagonally across from each other on the board, our BFS with back-tracking would output an infinite loop as it will continue trying to back-track.
On the other hand, our naive BFS approach would not place down any wires since there is no back-tracking and the board does not work.


4. Evaluation of the time complexity and wall-clock time of our algorithm
- p! * (p * n) = all the combinations of wires * bfs for each of the pairs
  - n = number of spots on the board
  - p = number of pairs (could be n/2 at most)
- wall clock time = 41 ms
